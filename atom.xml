<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一个青年的Class</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="RmBBBBBBBBB.github.io.git/"/>
  <updated>2019-02-18T02:22:39.719Z</updated>
  <id>RmBBBBBBBBB.github.io.git/</id>
  
  <author>
    <name>杨瑞峰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Http单向，双向认证</title>
    <link href="RmBBBBBBBBB.github.io.git/http%E5%8D%95%E5%90%91%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81/"/>
    <id>RmBBBBBBBBB.github.io.git/http单向双向认证/</id>
    <published>2019-02-18T02:22:39.719Z</published>
    <updated>2019-02-18T02:22:39.719Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Http"><a href="#一、Http" class="headerlink" title="一、Http"></a>一、Http</h3><p>HyperText Transfer Protocol，超文本传输协议，是互联网上使用最广泛的一种协议，所有WWW文件必须遵循的标准。HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全。</p><p>使用TCP端口为：80</p><h3 id="二、Https"><a href="#二、Https" class="headerlink" title="二、Https"></a>二、Https</h3><p>Hyper Text Transfer Protocol over Secure Socket Layer，安全的超文本传输协议，<a href="https://www.baidu.com/s?wd=%E7%BD%91%E6%99%AF&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">网景</a>公式设计了SSL(Secure Sockets Layer)协议用于对Http协议传输的数据进行加密，保证会话过程中的安全性。</p><p>使用TCP端口默认为443</p><h3 id="三、SSL协议加密方式"><a href="#三、SSL协议加密方式" class="headerlink" title="三、SSL协议加密方式"></a>三、SSL协议加密方式</h3><p>SSL协议即用到了对称加密也用到了非对称加密(公钥加密)，在建立传输链路时，SSL首先对对称加密的密钥使用公钥进行非对称加密，链路建立好之后，SSL对传输内容使用对称加密。</p><ul><li>对称加密<br>速度高，可加密内容较大，用来加密会话过程中的消息</li><li>公钥加密<br>加密速度较慢，但能提供更好的身份认证技术，用来加密对称加密的密钥</li></ul><h3 id="四、单向认证"><a href="#四、单向认证" class="headerlink" title="四、单向认证"></a>四、单向认证</h3><p>Https在建立Socket连接之前，需要进行握手，具体过程如下：</p><p><img src="https://img-blog.csdn.net/20180626110258813?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1cGVydmlzZXIzMDAw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>1、客户端向服务端发送SSL协议版本号、加密算法种类、随机数等信息。</p><p>2、服务端给客户端返回SSL协议版本号、加密算法种类、随机数等信息，同时也返回<a href="https://www.baidu.com/s?wd=%E6%9C%8D%E5%8A%A1%E5%99%A8&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">服务器</a>端的证书，即公钥证书</p><p>3、客户端使用服务端返回的信息验证服务器的合法性，包括：</p><ul><li>证书是否过期</li><li>发型服务器证书的CA是否可靠</li><li>返回的公钥是否能正确解开返回证书中的数字签名</li><li>服务器证书上的域名是否和服务器的实际域名相匹配</li></ul><p>验证通过后，将继续进行通信，否则，终止通信</p><p>4、客户端向服务端发送自己所能支持的对称加密方案，供服务器端进行选择</p><p>5、服务器端在客户端提供的加密方案中选择加密程度最高的加密方式。</p><p>6、服务器将选择好的加密方案通过明文方式返回给客户端</p><p>7、客户端接收到服务端返回的加密方式后，使用该加密方式生成产生随机码，用作通信过程中对称加密的密钥，使用服务端返回的公钥进行加密，将加密后的随机码发送至服务器</p><p>8、服务器收到客户端返回的加密信息后，使用自己的私钥进行解密，获取对称加密密钥。 在接下来的会话中，服务器和客户端将会使用该密码进行对称加密，保证通信过程中信息的安全。</p><h3 id="五、双向认证"><a href="#五、双向认证" class="headerlink" title="五、双向认证"></a>五、双向认证</h3><p>双向认证和单向认证原理基本差不多，只是除了客户端需要认证服务端以外，增加了服务端对客户端的认证，具体过程如下：</p><p><img src="https://img-blog.csdn.net/20180626110327272?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1cGVydmlzZXIzMDAw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>1、客户端向服务端发送SSL协议版本号、加密算法种类、随机数等信息。</p><p>2、服务端给客户端返回SSL协议版本号、加密算法种类、随机数等信息，同时也返回服务器端的证书，即公钥证书</p><p>3、客户端使用服务端返回的信息验证服务器的合法性，包括：</p><ul><li>证书是否过期</li><li>发型服务器证书的CA是否可靠</li><li>返回的公钥是否能正确解开返回证书中的数字签名</li><li>服务器证书上的域名是否和服务器的实际域名相匹配</li></ul><p>验证通过后，将继续进行通信，否则，终止通信</p><p>4、服务端要求客户端发送客户端的证书，客户端会将自己的证书发送至服务端</p><p>5、验证客户端的证书，通过验证后，会获得客户端的公钥</p><p>6、客户端向服务端发送自己所能支持的对称加密方案，供服务器端进行选择</p><p>7、服务器端在客户端提供的加密方案中选择加密程度最高的加密方式</p><p>8、将加密方案通过使用之前获取到的公钥进行加密，返回给客户端</p><p>9、客户端收到服务端返回的加密方案密文后，使用自己的私钥进行解密，获取具体加密方式，而后，产生该加密方式的随机码，用作加密过程中的密钥，使用之前从服务端证书中获取到的公钥进行加密后，发送给服务端</p><p>10、服务端收到客户端发送的消息后，使用自己的私钥进行解密，获取对称加密的密钥，在接下来的会话中，服务器和客户端将会使用该密码进行对称加密，保证通信过程中信息的安全。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、Http&quot;&gt;&lt;a href=&quot;#一、Http&quot; class=&quot;headerlink&quot; title=&quot;一、Http&quot;&gt;&lt;/a&gt;一、Http&lt;/h3&gt;&lt;p&gt;HyperText Transfer Protocol，超文本传输协议，是互联网上使用最广泛的一种协议，所有
      
    
    </summary>
    
      <category term="技术" scheme="RmBBBBBBBBB.github.io.git/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ssL" scheme="RmBBBBBBBBB.github.io.git/tags/ssL/"/>
    
  </entry>
  
  <entry>
    <title>HttpClient验证接口</title>
    <link href="RmBBBBBBBBB.github.io.git/HttpClient%E9%AA%8C%E8%AF%81%E6%8E%A5%E5%8F%A3/"/>
    <id>RmBBBBBBBBB.github.io.git/HttpClient验证接口/</id>
    <published>2019-02-15T08:24:27.937Z</published>
    <updated>2019-02-15T08:24:27.925Z</updated>
    
    <content type="html"><![CDATA[<p>Http协议的重要性相信不用我多说了，HttpClient相比传统JDK自带的URLConnection，增加了易用性和灵活性（具体区别，日后我们再讨论），它不仅是客户端发送Http请求变得容易，而且也方便了开发人员测试接口（基于Http协议的），即提高了开发的效率，也方便提高代码的健壮性。因此熟练掌握HttpClient是很重要的必修内容，掌握HttpClient后，相信对于Http协议的了解会更加深入。</p><h5 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h5><p>HttpClient是Apache Jakarta Common下的子项目，用来提供高效的、最新的、功能丰富的支持HTTP协议的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。HttpClient已经应用在很多的项目中，比如Apache Jakarta上很著名的另外两个开源项目Cactus和HTMLUnit都使用了HttpClient。</p><p>下载地址: <a href="http://hc.apache.org/downloads.cgi" target="_blank" rel="noopener">http://hc.apache.org/downloads.cgi</a></p><h5 id="二、特性"><a href="#二、特性" class="headerlink" title="二、特性"></a>二、特性</h5><ol><li><p>基于标准、纯净的java语言。实现了Http1.0和Http1.1</p></li><li><p>以可扩展的面向对象的结构实现了Http全部的方法（GET, POST, PUT, DELETE, HEAD, OPTIONS, and TRACE）。</p></li><li><p>支持HTTPS协议。</p></li><li><p>通过Http代理建立透明的连接。</p></li><li><p>利用CONNECT方法通过Http代理建立隧道的https连接。</p></li><li><p>Basic, Digest, NTLMv1, NTLMv2, NTLM2 Session, SNPNEGO/Kerberos认证方案。</p></li><li><p>插件式的自定义认证方案。</p></li><li><p>便携可靠的套接字工厂使它更容易的使用第三方解决方案。</p></li><li><p>连接管理器支持多线程应用。支持设置最大连接数，同时支持设置每个主机的最大连接数，发现并关闭过期的连接。</p></li><li><p>自动处理Set-Cookie中的Cookie。</p></li><li><p>插件式的自定义Cookie策略。</p></li><li><p>Request的输出流可以避免流中内容直接缓冲到socket服务器。</p></li><li><p>Response的输入流可以有效的从socket服务器直接读取相应内容。</p></li><li><p>在http1.0和http1.1中利用KeepAlive保持持久连接。</p></li><li><p>直接获取服务器发送的response code和 headers。</p></li><li><p>设置连接超时的能力。</p></li><li><p>实验性的支持http1.1 response caching。</p></li><li><p>源代码基于Apache License 可免费获取。</p></li></ol><h5 id="三、使用方法"><a href="#三、使用方法" class="headerlink" title="三、使用方法"></a>三、使用方法</h5><p>使用HttpClient发送请求、接收响应很简单，一般需要如下几步即可。</p><ol><li><p>创建HttpClient对象。</p></li><li><p>创建请求方法的实例，并指定请求URL。如果需要发送GET请求，创建HttpGet对象；如果需要发送POST请求，创建HttpPost对象。</p></li><li><p>如果需要发送请求参数，可调用HttpGet、HttpPost共同的setParams(HetpParams params)方法来添加请求参数；对于HttpPost对象而言，也可调用setEntity(HttpEntity entity)方法来设置请求参数。</p></li><li><p>调用HttpClient对象的execute(HttpUriRequest request)发送请求，该方法返回一个HttpResponse。</p></li><li><p>调用HttpResponse的getAllHeaders()、getHeaders(String name)等方法可获取服务器的响应头；调用HttpResponse的getEntity()方法可获取HttpEntity对象，该对象包装了服务器的响应内容。程序可通过该对象获取服务器的响应内容。</p></li><li><p>释放连接。无论执行方法是否成功，都必须释放连接</p><h5 id="第一种验证方式："><a href="#第一种验证方式：" class="headerlink" title="第一种验证方式："></a>第一种验证方式：</h5></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyManagementException;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStoreException;</span><br><span class="line"><span class="keyword">import</span> java.security.UnrecoverableKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStore;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.KeyManager;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.KeyManagerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.X509TrustManager;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.TrustManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpVersion;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.HttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ClientConnectionManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.scheme.PlainSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.scheme.Scheme;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.scheme.SchemeRegistry;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.socket.ConnectionSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.socket.PlainConnectionSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.TrustStrategy;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.TrustSelfSignedStrategy;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.StringEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.DefaultHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.conn.BasicClientConnectionManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.conn.DefaultProxyRoutePlanner;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.conn.PoolingHttpClientConnectionManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.message.BasicNameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.params.BasicHttpParams;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.params.HttpParams;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.params.HttpProtocolParams;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.protocol.HTTP;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- <span class="doctag">@param</span> keyStorePath 密钥库路径</span></span><br><span class="line"><span class="comment">   <span class="doctag">@param</span> keyStorepass 密钥库密码</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  - <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    /</span></span><br><span class="line"><span class="comment">        public static HttpClient customSSLClient(String keyStorePath, String keyStorepass) throws Exception &#123;</span></span><br><span class="line"><span class="comment">    HttpClient httpClient;</span></span><br><span class="line"><span class="comment">    // KeyStore trustStore = KeyStore.getInstance("PKCS12");</span></span><br><span class="line"><span class="comment">    //        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());</span></span><br><span class="line"><span class="comment">     KeyStore trustStore = KeyStore.getInstance("JKS");</span></span><br><span class="line"><span class="comment">     FileInputStream instream = new FileInputStream(new File(keyStorePath));</span></span><br><span class="line"><span class="comment">     try &#123;</span></span><br><span class="line"><span class="comment">         trustStore.load(instream, keyStorepass.toCharArray());</span></span><br><span class="line"><span class="comment">     &#125; finally &#123;</span></span><br><span class="line"><span class="comment">         try &#123;</span></span><br><span class="line"><span class="comment">    instream.close();</span></span><br><span class="line"><span class="comment">         &#125; catch (Exception ignore) &#123;</span></span><br><span class="line"><span class="comment">         &#125;</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment">     SSLSocketFactory sf = new SSLSocketFactoryEx(trustStore, keyStorepass.toCharArray());</span></span><br><span class="line"><span class="comment">     sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);</span></span><br><span class="line"><span class="comment">     HttpParams params = new BasicHttpParams();</span></span><br><span class="line"><span class="comment">     HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);</span></span><br><span class="line"><span class="comment">     HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   SchemeRegistry registry = new SchemeRegistry();</span></span><br><span class="line"><span class="comment">   registry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));</span></span><br><span class="line"><span class="comment">   registry.register(new Scheme("https", sf, 443));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   ClientConnectionManager ccm = new BasicClientConnectionManager(registry);</span></span><br><span class="line"><span class="comment">   httpClient = new DefaultHttpClient(ccm);</span></span><br><span class="line"><span class="comment">   return httpClient;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment"> private static class SSLSocketFactoryEx extends SSLSocketFactory &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        SSLContext sslContext = SSLContext.getInstance("TLS");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        public SSLSocketFactoryEx(KeyStore truststore, char[] arry)</span></span><br><span class="line"><span class="comment">                throws NoSuchAlgorithmException, KeyManagementException,</span></span><br><span class="line"><span class="comment">                KeyStoreException, UnrecoverableKeyException &#123;</span></span><br><span class="line"><span class="comment">            super(truststore);</span></span><br><span class="line"><span class="comment">            KeyManagerFactory localKeyManagerFactory =</span></span><br><span class="line"><span class="comment">                    KeyManagerFactory.getInstance(KeyManagerFactory</span></span><br><span class="line"><span class="comment">                            .getDefaultAlgorithm());</span></span><br><span class="line"><span class="comment">            localKeyManagerFactory.init(truststore, arry);</span></span><br><span class="line"><span class="comment">            KeyManager[] arrayOfKeyManager =</span></span><br><span class="line"><span class="comment">                    localKeyManagerFactory.getKeyManagers();</span></span><br><span class="line"><span class="comment">            TrustManager tm = new X509TrustManager() &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">                public X509Certificate[] getAcceptedIssuers() &#123;</span></span><br><span class="line"><span class="comment">                    return null;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">                public void checkServerTrusted(X509Certificate[] chain,</span></span><br><span class="line"><span class="comment">                                               String authType) throws CertificateException &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">                public void checkClientTrusted(X509Certificate[] chain,</span></span><br><span class="line"><span class="comment">                                               String authType) throws CertificateException &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            sslContext.init(arrayOfKeyManager, new TrustManager[]&#123;tm&#125;,</span></span><br><span class="line"><span class="comment">                    new java.security.SecureRandom());</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">        public Socket createSocket(Socket socket, String host, int port,</span></span><br><span class="line"><span class="comment">                                   boolean autoClose) throws IOException, UnknownHostException &#123;</span></span><br><span class="line"><span class="comment">            return sslContext.getSocketFactory().createSocket(socket, host, port,</span></span><br><span class="line"><span class="comment">                    autoClose);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">        public Socket createSocket() throws IOException &#123;</span></span><br><span class="line"><span class="comment">            return sslContext.getSocketFactory().createSocket();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">//main方法</span></span><br><span class="line"><span class="comment">public static void main(String[] args) throws Exception &#123;</span></span><br><span class="line"><span class="comment">String keyStorePath ="d:\\java\\hgclient.keystore";</span></span><br><span class="line"><span class="comment">String keyStorepass ="123456";</span></span><br><span class="line"><span class="comment">HttpClient customSSLClient = customSSLClient(keyStorePath, keyStorepass);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">HttpPost httpPost = new HttpPost("https://114.116.131.5:18443/hgpayment/XmlTransServlet");</span></span><br><span class="line"><span class="comment">HttpResponse execute = customSSLClient.execute(httpPost);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if(execute.getStatusLine().getStatusCode()==200)&#123;</span></span><br><span class="line"><span class="comment">HttpEntity entity = execute.getEntity();//调用getEntity()方法获取到一个HttpEntity实例</span></span><br><span class="line"><span class="comment">//用EntityUtils.toString()这个静态方法将HttpEntity转换成字符串,防止服务器返回的数据带有中文,所以在转换的时候将字符集指定成utf-8就可以了</span></span><br><span class="line"><span class="comment">String string = EntityUtils.toString(entity,"utf-8");</span></span><br><span class="line"><span class="comment">System.out.println("--EntityUtils--"+string);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">System.out.println("response.getStatusLine()-----"+execute.getStatusLine());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="第二种验证方式："><a href="#第二种验证方式：" class="headerlink" title="第二种验证方式："></a>第二种验证方式：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.TrustStrategy;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.ssl.SSLContexts;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStore;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        KeyStore keyStore = KeyStore.getInstance(<span class="string">"PKCS12"</span>);</span><br><span class="line">        keyStore.load(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"D:\\java\\hgclient.keystore"</span>)), <span class="string">"123456"</span>.toCharArray());</span><br><span class="line">        SSLContext sslcontext = SSLContexts.custom()</span><br><span class="line">                <span class="comment">//忽略掉对服务器端证书的校验</span></span><br><span class="line">                .loadTrustMaterial(<span class="keyword">new</span> TrustStrategy() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//加载服务端提供的truststore(如果服务器提供truststore的话就不用忽略对服务器端证书的校验了)</span></span><br><span class="line">                <span class="comment">//.loadTrustMaterial(new File("D:\\truststore.jks"), "123456".toCharArray(),</span></span><br><span class="line">                <span class="comment">//        new TrustSelfSignedStrategy())</span></span><br><span class="line">                .loadKeyMaterial(keyStore, <span class="string">"123456"</span>.toCharArray())</span><br><span class="line">                .build();</span><br><span class="line">        SSLConnectionSocketFactory sslConnectionSocketFactory = <span class="keyword">new</span> SSLConnectionSocketFactory(</span><br><span class="line">                sslcontext,</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">"TLSv1"</span>&#125;,</span><br><span class="line">                <span class="keyword">null</span>,</span><br><span class="line">                SSLConnectionSocketFactory.getDefaultHostnameVerifier());</span><br><span class="line">        CloseableHttpClient httpclient = HttpClients.custom()</span><br><span class="line">                .setSSLSocketFactory(sslConnectionSocketFactory)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//   HttpGet httpget = new HttpGet("https://114.116.131.5:18443/hgpayment/XmlTransServlet");</span></span><br><span class="line">         <span class="comment">//  HttpPost HttpPost = new HttpPost("https://114.116.131.5:18443/hgpayment/XmlTransServlet");</span></span><br><span class="line">           HttpPost HttpPost = <span class="keyword">new</span> HttpPost(<span class="string">"https://114.116.131.5:18443/hgsptsmsm/XmlSptsmServlet"</span>);</span><br><span class="line">         <span class="comment">//   HttpPost HttpPost = new HttpPost("https://sptsm.heigo.com.cn/hgpayment/XmlTransServlet");</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"Executing request "</span> + HttpPost.getRequestLine());</span><br><span class="line"></span><br><span class="line">            CloseableHttpResponse response = httpclient.execute(HttpPost);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                HttpEntity entity = response.getEntity();</span><br><span class="line">                System.out.println(<span class="string">"response.getStatusLine()-----"</span>+response.getStatusLine());</span><br><span class="line">                System.out.println(<span class="string">"----IO----"</span>+IOUtils.toString(entity.getContent()));</span><br><span class="line">                EntityUtils.consume(entity);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            httpclient.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="第三种验证post，get，upload"><a href="#第三种验证post，get，upload" class="headerlink" title="第三种验证post，get，upload"></a>第三种验证post，get，upload</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyManagementException;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStore;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStoreException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.NameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.ParseException;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.ClientProtocolException;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.entity.UrlEncodedFormEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLContexts;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.TrustSelfSignedStrategy;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.ContentType;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.mime.MultipartEntityBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.mime.content.FileBody;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.mime.content.StringBody;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.message.BasicNameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientTest</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jUnitTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">get();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HttpClient连接SSL</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ssl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CloseableHttpClient httpclient = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());</span><br><span class="line">FileInputStream instream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"d:\\tomcat.keystore"</span>));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 加载keyStore d:\\tomcat.keystore  </span></span><br><span class="line">trustStore.load(instream, <span class="string">"123456"</span>.toCharArray());</span><br><span class="line">&#125; <span class="keyword">catch</span> (CertificateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">instream.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ignore) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 相信自己的CA和所有自签名的证书</span></span><br><span class="line">SSLContext sslcontext = SSLContexts.custom().loadTrustMaterial(trustStore, <span class="keyword">new</span> TrustSelfSignedStrategy()).build();</span><br><span class="line"><span class="comment">// 只允许使用TLSv1协议</span></span><br><span class="line">SSLConnectionSocketFactory sslsf = <span class="keyword">new</span> SSLConnectionSocketFactory(sslcontext, <span class="keyword">new</span> String[] &#123; <span class="string">"TLSv1"</span> &#125;, <span class="keyword">null</span>,</span><br><span class="line">SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);</span><br><span class="line">httpclient = HttpClients.custom().setSSLSocketFactory(sslsf).build();</span><br><span class="line"><span class="comment">// 创建http请求(get方式)</span></span><br><span class="line">HttpGet httpget = <span class="keyword">new</span> HttpGet(<span class="string">"https://localhost:8443/myDemo/Ajax/serivceJ.action"</span>);</span><br><span class="line">System.out.println(<span class="string">"executing request"</span> + httpget.getRequestLine());</span><br><span class="line">CloseableHttpResponse response = httpclient.execute(httpget);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">HttpEntity entity = response.getEntity();</span><br><span class="line">System.out.println(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">System.out.println(response.getStatusLine());</span><br><span class="line"><span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"Response content length: "</span> + entity.getContentLength());</span><br><span class="line">System.out.println(EntityUtils.toString(entity));</span><br><span class="line">EntityUtils.consume(entity);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">response.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (KeyManagementException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (KeyStoreException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (httpclient != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">httpclient.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * post方式提交表单（模拟用户登录请求）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postForm</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建默认的httpClient实例.  </span></span><br><span class="line">CloseableHttpClient httpclient = HttpClients.createDefault();</span><br><span class="line"><span class="comment">// 创建httppost  </span></span><br><span class="line">HttpPost httppost = <span class="keyword">new</span> HttpPost(<span class="string">"http://localhost:8080/myDemo/Ajax/serivceJ.action"</span>);</span><br><span class="line"><span class="comment">// 创建参数队列  </span></span><br><span class="line">List formparams = <span class="keyword">new</span> ArrayList();</span><br><span class="line">formparams.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"username"</span>, <span class="string">"admin"</span>));</span><br><span class="line">formparams.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"password"</span>, <span class="string">"123456"</span>));</span><br><span class="line">UrlEncodedFormEntity uefEntity;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">uefEntity = <span class="keyword">new</span> UrlEncodedFormEntity(formparams, <span class="string">"UTF-8"</span>);</span><br><span class="line">httppost.setEntity(uefEntity);</span><br><span class="line">System.out.println(<span class="string">"executing request "</span> + httppost.getURI());</span><br><span class="line">CloseableHttpResponse response = httpclient.execute(httppost);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">HttpEntity entity = response.getEntity();</span><br><span class="line"><span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"--------------------------------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"Response content: "</span> + EntityUtils.toString(entity, <span class="string">"UTF-8"</span>));</span><br><span class="line">System.out.println(<span class="string">"--------------------------------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">response.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接,释放资源  </span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">httpclient.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送 post请求访问本地应用并根据传递参数不同返回不同结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建默认的httpClient实例.  </span></span><br><span class="line">CloseableHttpClient httpclient = HttpClients.createDefault();</span><br><span class="line"><span class="comment">// 创建httppost  </span></span><br><span class="line">HttpPost httppost = <span class="keyword">new</span> HttpPost(<span class="string">"http://localhost:8080/myDemo/Ajax/serivceJ.action"</span>);</span><br><span class="line"><span class="comment">// 创建参数队列  </span></span><br><span class="line">List formparams = <span class="keyword">new</span> ArrayList();</span><br><span class="line">formparams.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"type"</span>, <span class="string">"house"</span>));</span><br><span class="line">UrlEncodedFormEntity uefEntity;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">uefEntity = <span class="keyword">new</span> UrlEncodedFormEntity(formparams, <span class="string">"UTF-8"</span>);</span><br><span class="line">httppost.setEntity(uefEntity);</span><br><span class="line">System.out.println(<span class="string">"executing request "</span> + httppost.getURI());</span><br><span class="line">CloseableHttpResponse response = httpclient.execute(httppost);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">HttpEntity entity = response.getEntity();</span><br><span class="line"><span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"--------------------------------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"Response content: "</span> + EntityUtils.toString(entity, <span class="string">"UTF-8"</span>));</span><br><span class="line">System.out.println(<span class="string">"--------------------------------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">response.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接,释放资源  </span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">httpclient.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送 get请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CloseableHttpClient httpclient = HttpClients.createDefault();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 创建httpget.  </span></span><br><span class="line">HttpGet httpget = <span class="keyword">new</span> HttpGet(<span class="string">"http://www.baidu.com/"</span>);</span><br><span class="line">System.out.println(<span class="string">"executing request "</span> + httpget.getURI());</span><br><span class="line"><span class="comment">// 执行get请求.  </span></span><br><span class="line">CloseableHttpResponse response = httpclient.execute(httpget);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取响应实体  </span></span><br><span class="line">HttpEntity entity = response.getEntity();</span><br><span class="line">System.out.println(<span class="string">"--------------------------------------"</span>);</span><br><span class="line"><span class="comment">// 打印响应状态  </span></span><br><span class="line">System.out.println(response.getStatusLine());</span><br><span class="line"><span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 打印响应内容长度  </span></span><br><span class="line">System.out.println(<span class="string">"Response content length: "</span> + entity.getContentLength());</span><br><span class="line"><span class="comment">// 打印响应内容  </span></span><br><span class="line">System.out.println(<span class="string">"Response content: "</span> + EntityUtils.toString(entity));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"------------------------------------"</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">response.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接,释放资源  </span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">httpclient.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CloseableHttpClient httpclient = HttpClients.createDefault();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">HttpPost httppost = <span class="keyword">new</span> HttpPost(<span class="string">"http://localhost:8080/myDemo/Ajax/serivceFile.action"</span>);</span><br><span class="line"> </span><br><span class="line">FileBody bin = <span class="keyword">new</span> FileBody(<span class="keyword">new</span> File(<span class="string">"F:\\image\\sendpix0.jpg"</span>));</span><br><span class="line">StringBody comment = <span class="keyword">new</span> StringBody(<span class="string">"A binary file of some kind"</span>, ContentType.TEXT_PLAIN);</span><br><span class="line"> </span><br><span class="line">HttpEntity reqEntity = MultipartEntityBuilder.create().addPart(<span class="string">"bin"</span>, bin).addPart(<span class="string">"comment"</span>, comment).build();</span><br><span class="line"> </span><br><span class="line">httppost.setEntity(reqEntity);</span><br><span class="line"> </span><br><span class="line">System.out.println(<span class="string">"executing request "</span> + httppost.getRequestLine());</span><br><span class="line">CloseableHttpResponse response = httpclient.execute(httppost);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">System.out.println(response.getStatusLine());</span><br><span class="line">HttpEntity resEntity = response.getEntity();</span><br><span class="line"><span class="keyword">if</span> (resEntity != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"Response content length: "</span> + resEntity.getContentLength());</span><br><span class="line">&#125;</span><br><span class="line">EntityUtils.consume(resEntity);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">response.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">httpclient.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Http协议的重要性相信不用我多说了，HttpClient相比传统JDK自带的URLConnection，增加了易用性和灵活性（具体区别，日后我们再讨论），它不仅是客户端发送Http请求变得容易，而且也方便了开发人员测试接口（基于Http协议的），即提高了开发的效率，也方便
      
    
    </summary>
    
      <category term="技术" scheme="RmBBBBBBBBB.github.io.git/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="HttpCilent" scheme="RmBBBBBBBBB.github.io.git/tags/HttpCilent/"/>
    
      <category term="java" scheme="RmBBBBBBBBB.github.io.git/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>如何在linux上搭建hexo博客</title>
    <link href="RmBBBBBBBBB.github.io.git/%E5%9C%A8linux%E4%B8%8A%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/"/>
    <id>RmBBBBBBBBB.github.io.git/在linux上搭建hexo博客/</id>
    <published>2018-11-27T02:33:57.000Z</published>
    <updated>2018-11-27T05:56:46.105Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-环境"><a href="#一-环境" class="headerlink" title="一  环境"></a>一  环境</h4><p>​    1.<strong>Linux</strong>服务器一台：阿里云购买，或者centos操作系统</p><p>​    2.<strong>Node.js</strong>环境</p><p>​    3.<strong>Nginx</strong>:用作代理，直接’<strong>yun install nginx</strong>‘即可</p><p>​    4.<strong>Git</strong>：链接github 同步，域名链接</p><h4 id="二-安装Node-js"><a href="#二-安装Node-js" class="headerlink" title="二  安装Node.js"></a>二  安装Node.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># npm config get registry // https://registry.npmjs.org/</span><br><span class="line"># npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>​    使用 <strong>node -v</strong> &amp; <strong>npm -v</strong> 命令查询是否安装成功</p><h4 id="三-安装-Nginx"><a href="#三-安装-Nginx" class="headerlink" title="三 安装 Nginx"></a>三 安装 Nginx</h4><ol><li><p>yun install nginx 安装</p></li><li><p>修改nginx配置文件，<code>vi /etc/nginx/nginx.confg</code></p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">#省略其他配置  </span><br><span class="line"> server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    #省略其他配置</span><br><span class="line">    location / &#123;</span><br><span class="line">    # 将blog目录下的全路径public复制进来</span><br><span class="line">     root   /opt/myBlog/public; </span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="四-安装git"><a href="#四-安装git" class="headerlink" title="四 安装git"></a>四 安装git</h4><ol><li><p>注册 <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p></li><li><p>创建项目为 yourusername.github.io （一定是[你用户名.github.io]</p></li><li><p>生成ssh key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.ssh </span><br><span class="line">cd ~/.ssh</span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></li><li><p>自己用的电脑，不用设置密码啥的，一路回车就行，这时候会在 ~/.ssh/下生成两个ssh key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>这一步是使用刚才生成那个公钥作为本机ssh使用的口令</p><p>进入GitHub个人设置页面，点击SSH and GPGkeys 添加一个SSH key 题目自拟，复制以下输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>以上SSH就配置好了，接下来是配置git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config –global user.name “xxx” </span><br><span class="line">git config –global user.email “xxx@xxx.com”</span><br></pre></td></tr></table></figure></li><li><p>接下来测试一下吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li></ol><h4 id="五-搭建本地hexo"><a href="#五-搭建本地hexo" class="headerlink" title="五 搭建本地hexo"></a>五 搭建本地hexo</h4><ol><li><p>安装hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g </span><br><span class="line">cd </span><br><span class="line">hexo init blog </span><br><span class="line">cd blog </span><br><span class="line">npm install </span><br><span class="line">hexo server </span><br><span class="line">npm install hexo-deployer-git –save</span><br></pre></td></tr></table></figure></li><li><p>在网站的_config.yml中配置deploy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: [branch]</span><br><span class="line"> # branch为分支，默认为master,可以不配置 repo为仓库地址，在github上新建仓库后，可复制此地址</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li><p>部署到 github</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一-环境&quot;&gt;&lt;a href=&quot;#一-环境&quot; class=&quot;headerlink&quot; title=&quot;一  环境&quot;&gt;&lt;/a&gt;一  环境&lt;/h4&gt;&lt;p&gt;​    1.&lt;strong&gt;Linux&lt;/strong&gt;服务器一台：阿里云购买，或者centos操作系统&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
  </entry>
  
</feed>
